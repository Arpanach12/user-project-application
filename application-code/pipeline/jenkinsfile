node {
 try  {
 notify('Job Started') 

     
  stage('Git-CheckOut') {
   git 'https://github.com/devops311/user-project-application.git'
  }
    
 def project_path="application-code/code/userproject"
 
 dir(project_path) {
    
  stage('Maven-Clean') {
   sh label: '', script: 'mvn clean'
  }
    
 stage('Maven-Compile') {
   sh label: '', script: 'mvn compile'
  }
  
 stage('Sonar Analysis'){
        withSonarQubeEnv('SonarQube'){
         sh 'mvn sonar:sonar'
        }
 }  
 
  /*
  stage("Defined Quality Gate"){
          timeout(time: 1, unit: 'HOURS') {
              def qg = waitForQualityGate()
              if (qg.status != 'OK') {
                  error "Pipeline aborted due to quality gate failure: ${qg.status}"
              }
          }
      }
 */
   stage('Maven-Test') {
   sh label: '', script: 'mvn test'
  }
  
   stage('Maven-Package') {
   sh label: '', script: 'mvn package'
  }
  
  /*
  stage('Archive-Artifacts') {
   archiveArtifacts 'target/*.war'
  }
  
stage('Jfrog Artifacory Upload') {
        def server= Artifactory.server 'Artifactory'
                    def uploadSpec= """{
                        "files": [{
                        "pattern": "target/*.war",
                        "target": "userproject"}]
                    }"""
        server.upload(uploadSpec)
        
        }
	*/
	
 }
 stage('Docker Deployment'){
    
        dir("/var/lib/jenkins/workspace/Job1/"){
        sh 'docker build -t userproject:$BUILD_NUMBER .'
        sh 'docker run -d -p 8080:8080 --name userproject$BUILD_NUMBER userprojectimage:$BUILD_NUMBER'
    }
    }


  
 
}
notify('Job Completed')   
} catch (err) {
  notify("Error ${err}")
  currentBuild.result = 'FAILURE'
}
}



def notify(status){
    emailext (
	to: "devashishkumar311@gmail.com",
	subject: "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
	 body: """<p>${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
	<p>Check console output at <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>""",
		)
	}


